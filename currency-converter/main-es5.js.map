{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/currency-amount-select/currency-amount-select.component.ts","webpack:///src/app/components/currency-amount-select/currency-amount-select.component.html","webpack:///src/app/components/currency-exchange/currency-exchange.component.ts","webpack:///src/app/components/currency-exchange/currency-exchange.component.html","webpack:///src/app/services/currency-rates.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","initApp","currencyRatesService","initializeRates","AppModule","provide","useFactory","multi","deps","declarations","imports","providers","bootstrap","CurrencyAmountSelectComponent","currencyChange","amountChange","amount","emit","currency","onAmountChange","onCurrencyChange","CurrencyExchangeComponent","currency1","currency2","amount1","amount2","mostRecentAmountChanged","onAmount1Changed","exchange","CurrencyRatesService","http","rateLoadStatusMessage","rateDate","Date","obj","x","isEmpty","currencies","get","currencyListUrl","rateContainer","currencyRatesContainerUrl","pipe","error","currencyListBackupUrl","currencyRatesContainerBackupUrl","err","rates","result","base","cleanUpCurrenciesWithoutRates","timestamp","toPromise","Object","getOwnPropertyNames","forEach","currencyCode","currencyFrom","currencyTo","Number","rateFrom","rateTo","providedIn","openexchangeratesApiKey","environment","production","bootstrapModule","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'currency-converter';\n}\n","<app-currency-exchange> </app-currency-exchange>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { CurrencyAmountSelectComponent } from './components/currency-amount-select/currency-amount-select.component';\nimport { CurrencyExchangeComponent } from './components/currency-exchange/currency-exchange.component';\nimport { CurrencyRatesService } from './services/currency-rates.service';\n\n\nexport function initApp(currencyRatesService: CurrencyRatesService) {\n  return () => currencyRatesService.initializeRates();\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CurrencyAmountSelectComponent,\n    CurrencyExchangeComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initApp,\n      multi: true,\n      deps: [CurrencyRatesService]\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-currency-amount-select',\n  templateUrl: './currency-amount-select.component.html',\n  styleUrls: ['./currency-amount-select.component.scss']\n})\nexport class CurrencyAmountSelectComponent implements OnInit {\n\n  @Input() currencies;\n  @Input() currency: string;\n  @Input() amount: number;\n  @Output() currencyChange = new EventEmitter<string>();\n  @Output() amountChange = new EventEmitter<number>();\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onAmountChange(amount) {\n    this.amountChange.emit(amount);\n  }\n  onCurrencyChange(currency) {\n    this.currencyChange.emit(currency);\n  }\n\n}\n","<div>\n  <input\n    type=\"number\"\n    name=\"amount\"\n    [(ngModel)]=\"amount\"\n    (ngModelChange)=\"onAmountChange($event)\"\n  />\n  <select\n    name=\"currency\"\n    [(ngModel)]=\"currency\"\n    (ngModelChange)=\"onCurrencyChange($event)\"\n  >\n    <option *ngFor=\"let curr of currencies | keyvalue\" [value]=\"curr.key\"\n      >{{ curr.key }} - {{ curr.value }}</option\n    >\n  </select>\n</div>\n","import { Component } from '@angular/core';\nimport { CurrencyRatesService } from 'src/app/services/currency-rates.service';\n\n@Component({\n  selector: 'app-currency-exchange',\n  templateUrl: './currency-exchange.component.html',\n  styleUrls: ['./currency-exchange.component.scss']\n})\nexport class CurrencyExchangeComponent {\n\n  currency1 = 'USD';\n  currency2 = 'EUR';\n  amount1 = 1.00;\n  amount2 = 1.00;\n  mostRecentAmountChanged = 1;\n\n  constructor(\n    public currencyRatesService: CurrencyRatesService\n  ) {\n    this.onAmount1Changed();\n  }\n\n  onAmount1Changed() {\n    this.mostRecentAmountChanged = 1;\n    this.amount2 = this.currencyRatesService.exchange(this.amount1, this.currency1, this.currency2);\n  }\n\n  onAmount2Changed() {\n    this.mostRecentAmountChanged = 2;\n    this.amount1 = this.currencyRatesService.exchange(this.amount2, this.currency2, this.currency1);\n  }\n\n  onCurrencyChanged() {\n    if (this.mostRecentAmountChanged === 1) {\n      this.amount2 = this.currencyRatesService.exchange(this.amount1, this.currency1, this.currency2);\n    } else {\n      this.amount1 = this.currencyRatesService.exchange(this.amount2, this.currency2, this.currency1);\n    }\n  }\n}\n","<div class=\"container\">\n  <h1>Currency exchange</h1>\n  <p>\n    {{ currencyRatesService.rateLoadStatusMessage }}\n  </p>\n  <ng-container *ngIf=\"currencyRatesService.currenciesExist()\">\n    <p>\n      Rates dated:\n      {{ currencyRatesService.rateDate }}\n    </p>\n    <p>\n      <app-currency-amount-select\n        [currencies]=\"currencyRatesService.currencies\"\n        [(amount)]=\"amount1\"\n        [(currency)]=\"currency1\"\n        (amountChange)=\"onAmount1Changed()\"\n        (currencyChange)=\"onCurrencyChanged()\"\n      >\n      </app-currency-amount-select>\n    </p>\n    <p>\n      Approximately equals to:\n    </p>\n    <p>\n      <app-currency-amount-select\n        [currencies]=\"currencyRatesService.currencies\"\n        [(amount)]=\"amount2\"\n        [(currency)]=\"currency2\"\n        (amountChange)=\"onAmount2Changed()\"\n        (currencyChange)=\"onCurrencyChanged()\"\n      >\n      </app-currency-amount-select>\n    </p>\n  </ng-container>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { forkJoin, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { RateContainer } from '../models/rate-container';\nimport { Currencies } from '../models/currencies';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CurrencyRatesService {\n\n  public rateLoadStatusMessage = '';\n  public currencies: Currencies;\n  public rateContainer: RateContainer;\n  public rateDate: Date = new Date();\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  isEmpty(obj: any) {\n    if (!obj) {\n      return true;\n    }\n    // tslint:disable-next-line:forin\n    for (const x in obj) {\n      return false;\n    }\n    return true;\n  }\n\n  currenciesExist() {\n    return !this.isEmpty(this.currencies);\n  }\n\n  initializeRates() {\n    return forkJoin(\n      {\n        currencies: this.http.get(environment.currencyListUrl),\n        rateContainer: this.http.get(environment.currencyRatesContainerUrl),\n      }\n    ).pipe(\n      tap(() => this.rateLoadStatusMessage = 'Openexchangerates API fetch succeded.'),\n      catchError(error => {\n        this.rateLoadStatusMessage = 'Openexchangerates API fetch failed. Using local copy. ' +\n          'Please check the settings in environment.ts';\n        return forkJoin(\n          {\n            currencies: this.http.get(environment.currencyListBackupUrl),\n            rateContainer: this.http.get(environment.currencyRatesContainerBackupUrl),\n          });\n      }),\n      catchError(err => {\n        this.rateLoadStatusMessage = 'Could not fetch rates. ' +\n          'Please check the settings in environment.ts';\n        return of({\n          currencies: {},\n          rateContainer: { rates: {} }\n        });\n      }),\n      tap(result => {\n        this.currencies = result.currencies as Currencies;\n        this.rateContainer = result.rateContainer as RateContainer;\n        this.rateContainer.rates[this.rateContainer.base] = 1;\n        this.cleanUpCurrenciesWithoutRates();\n        this.rateDate = new Date(this.rateContainer.timestamp * 1000);\n      })\n    )\n      .toPromise();\n  }\n\n  private cleanUpCurrenciesWithoutRates() {\n    Object.getOwnPropertyNames(this.currencies).forEach(currencyCode => {\n      if (!this.rateContainer.rates[currencyCode]) {\n        delete this.currencies[currencyCode];\n      }\n    });\n  }\n\n  exchange(amount: number, currencyFrom: string, currencyTo: string) {\n    amount = Number(amount);\n    const rateFrom = this.rateContainer.rates[currencyFrom];\n    const rateTo = this.rateContainer.rates[currencyTo];\n    if (rateFrom && rateTo) {\n      return amount * (rateTo / rateFrom);\n    } else {\n      return 0;\n    }\n  }\n\n}\n","\n// It is isecure and generally bad practice to keep API keys in git repo, so please populate your API key before run\nconst openexchangeratesApiKey = '0e99a90e26224cc285f0d8f8cc7cadf2';\n\nexport const environment = {\n  production: false,\n\n  currencyListUrl: 'https://openexchangerates.org/api/currencies.json',\n  currencyRatesContainerUrl: `https://openexchangerates.org/api/latest.json?app_id=${openexchangeratesApiKey}&base=USD`,\n\n  currencyListBackupUrl: '/assets/currencies/currencies.json',\n  currencyRatesContainerBackupUrl: '/assets/currencies/latest.json'\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}